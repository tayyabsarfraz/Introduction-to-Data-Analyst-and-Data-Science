Title,YouTube Link,Description
Lec01 Introduction to System Programming (Arif Butt @ PUCIT),https://youtube.com/watch?v=qThI-U34KYs,This is the first session on the subject of System Programming with Linux. It starts with a discussion on application vs system programmer perspective. Describes briefly about a system call and how it works. A detailed discussion on Course Matrix.
Lec02 C Compilation: A System Programmer Perspective (Arif Butt @ PUCIT),https://youtube.com/watch?v=a7GhFL0Gh6Y,This session starts with the C-Compilation process from system programmer perspective. The contents of intermediate files are discussed using readelf and objdump commands. The executable is loaded in gdb and the contents of CPU registers are shown. How a C program actually makes a system call is described in detail by making a system call with and without wrapper and finally calling a system call from within an assembly program.
Lec03 Working of Linkers: Creating your own Libraries (Arif Butt @ PUCIT),https://youtube.com/watch?v=A67t7X2LUsA,"Linking and loading a process (Behind the curtain). Load time and run time dynamic linking. Structure of ELF file format. Merging re-locatable object files into executable. What is relocation.  Symbol (global, external, local) resolution. Strong and weak symbols. Linker symbol rules for multiple strong and weak symbols. Creating and using your own static libraries. Creating and using your own dynamic libraries or shared objects. (Tools used are nm, ar, ranlib)
Email: arif@pucit.edu.pk
Example Codes: https://bitbucket.org/arifpucit/spvl-repo/src "
Lec04 UNIX make utility (Arif Butt @ PUCIT),https://youtube.com/watch?v=8hG0MTyyxMI,"This session deals with the famous UNIX make utility. Starts with its introduction, how it works and how to write a basic Makefile. Using your own and built-in macros in a Makefile. Writing and calling multiple make files for a program"
Lec05 GNU autotools and cmake (Arif Butt @ PUCIT),https://youtube.com/watch?v=Ncb_xzjGAwM,"This session starts with a brief comparison between binary and open source software packages, their downloading and installation. We start with the procedure of packaging your own software using GNU autotools (autoconf and automake). Finally packaging and distribution of your softwares using cmake and cpack utilities are discussed. Bonus is writing and using your own man pages. (Tools used are make, autoconf, automake, cmake, cpack)"
Lec06 Versioning Systems git-I (Arif Butt @ PUCIT),https://youtube.com/watch?v=TBqLJg6PmWQ,"This session gives an overview of different models of versioning systems. Local version control systems (SCCS, RCS). Centralized version control systems (CVS, SVN). Distributed version control systems (git, bitkeeper, darcs, mercurial). Downloading and installing git. Basic git workflow and its configuration. Initializing git repository, Adding, editing, deleting and renaming files, and viewing commit logs. Ignoring files in git and undoing changes."
Lec07 Versioning Systems git-II (Arif Butt @ PUCIT),https://youtube.com/watch?v=3akXFcBDYc0,"This is a continuity of previous session and starts with the concept of git branches. Creating, renaming, deleting and comparing branches. Overview of merging branches. The concept of fast forward and real merge. Handling merge conflicts. Concept of remote repositories and creating one on bitbucket. Pushing a local repo to bitbucket. Cloning an existing repo from bitbucketemail: "
Lec08 Exit Handlers and Resource Limits (Arif Butt @ PUCIT),https://youtube.com/watch?v=ujzom1OyPMY,This session describes as to how a C program starts and terminates. Normal vs abnormal termination. Registering exit handlers using atexit() and on_exit() functions. Querying process resource limits and changing them on the shell. Getting and setting process resource limits from within a C program using getrlimit() and setrlimit() functions
Lec09 Stack Behind the Curtain (Arif Butt @ PUCIT),https://youtube.com/watch?v=1XbTmmWxHzo,This session describes how a process is laid out inside the memory and discuss some important logical addresses. It describes how the command line arguments and environment variables are laid out on the stack and their usage. A discussion on layout of overall process stack and how it grows and shrinks. Stack buffer overflow problem. Doing a non-local goto using longjmp() and setjmp() 
Lec10 Heap Behind the Curtain (Arif Butt @ PUCIT),https://youtube.com/watch?v=zpcPS27ZQr0,"This session start with a discussion on types of heap allocators. A quick review on malloc family of functions for allocating, using and freeing unnamed memory on heap.  Role of system calls brk() and sbrk() in management of heap. The basic data structures used in management of heap for allocated and unallocated blocks. Common programming errors related to heap management. Tools and libraries for malloc debugging like splint, electric-fence, and Valgrind."
Lec11 Design and Code of UNIX more utility (Arif Butt @ PUCIT),https://youtube.com/watch?v=epefPagPgvk,"This session deals with the design and development of UNIX more utility. It starts with the discussion of “What more do?”, then “How more do it?”, and finally different versions of more utility are designed and coded."
Lec12 UNIX File System Architecture (Arif Butt @ PUCIT),https://youtube.com/watch?v=x_bu6De71KY,"In this session will start with a quick recap of hard disk partitioning, formatting and mounting. The internal structure of UNIX file system (Disk, partitions, boot block, super block, inode block) are described in detail. Connection to an open file via PPFDT is discussed. The session will close with the concept of UNIX Universal I/O model (open-read-write-close paradigm)."
Lec13 UNIX File Management (Arif Butt @ PUCIT),https://youtube.com/watch?v=DZQkyoXgkMs,"This session will deal with various file related system calls. It starts with repositioning the current file offset using lseek(). Creating soft link to a file, changing permissions, and ownership of a file from within a C program. Different techniques of I/O redirection are discussed using dup() and dup2() system calls. Finally, the use of fcntl() system call is discussed to duplicate a file descriptor, get/set file descriptor flags in PPFDT, get/set file status flags in SWFT, and achieving advisory locks on files"
Lec14 Design and Code of UNIX ls Utility (Arif Butt @ PUCIT),https://youtube.com/watch?v=24WNjxn4asY,This session deals with the designing the ls program. First we will see what actually ls do? by digging in the details of its various options. Then we will try to understand how ls actually do it? Finally we will start writing different versions of the ls utility. We sill start from the very basic program that displays the listing of present working directory and finally we will write an ls program that shows the long listing of files of the directories passed as command line arguments.
Lec15 Design and Code Of UNIX who Utility (Arif Butt @ PUCIT),https://youtube.com/watch?v=96EcaPZo90U,This session deals with the different categories of OS configuration files as well as of different programs that we install on our Linux machine. Their importance in correct execution of different programs and services is discussed. Then we will start with the design of UNIX who utility. First we will see what who do? Then we will try to understand how who actually do it? Finally we will start writing different versions of the who utility. I will also discuss the concept off buffering done by our application programs and the OS kernel as well.
Lec16 Programming Terminal Devices (Arif Butt @ PUCIT),https://youtube.com/watch?v=t5sC6G73oo4,"This session starts with character and block special files and their attributes. The terminal devices are discussed in detail by reading and writing the terminal devices. The attributes of terminal driver (Input, output, control, and local processing) are discussed in detail. Modifying terminal attributes on the shell using stty command is shown. The two main modes of terminal driver Canonical and non-canonical are discussed. Finally accessing and modifying the terminal attributes from within a C program using system(),  tcgetattr(), tcsetattr() and ioctl() system call are discussed in details with example codes."
Lec17 Process Management-I (Arif Butt @ PUCIT),https://youtube.com/watch?v=R_01xGLp0ZQ,"This session starts with a quick recap of processes in Linux by giving an overview of the data structures maintained by Linux kernel to manage processes. We will discuss different identifications related to processes and their usage. The famous fork() system call is discussed in detail with example codes. Finally we will discuss the concept of process trees, chains and fans."
Lec18 Process Management-II (Arif Butt @ PUCIT),https://youtube.com/watch?v=91qzstPN1p8,"This session starts with a comparison between the fork() and the vfork() system call. We will discuss how the newer versions of fork() use the copy on write semantics. The concept of zombie and orphan processes are discussed. Then we will discuss different system calls that are used for monitoring the status of child processes like wait(), waitpid(), waitid(), wait3(), and wait4()"
Lec19 Process Management-III (Arif Butt @ PUCIT),https://youtube.com/watch?v=QWfeh1bFvs0,"This is a continuation of previous two sessions on process management. Today we will discuss the exec() family of functions that are used to overwrite the calling process address space with a new program. We will discuss the impact of fork() and exec() on different process attributes. We will write down our own system() function and use it to create a shell utility. The session will terminate with a discussion on process groups, process sessions, and controlling terminals."
Lec20 Design and Code Of Daemon Processes (Arif Butt @ PUCIT),https://youtube.com/watch?v=p0ccoTM7v8I,This session gives an overview of daemon processes in Linux. Writing your own daemon process programatically. Introduction to systemd (replacement of SysV init daemon). Controlling daemons using systemctl utility. Writing long lived process and managing it using systemctl
Lec21 Process Scheduling Algorithms (Arif Butt @ PUCIT),https://youtube.com/watch?v=Y86pa2nrT_k,This session gives an overview of  process scheduling algorithms used in Linux. It starts with a quick recap of some standard scheduling algorithms and the  UNIX SYS-VR3 process scheduler. Then the working of Linux O(1) scheduler is discussed in detail. After this the working of the latest Linux Completely Fair Share (CFS) scheduler is discussed. Finally accessing and changing scheduling parameters on the shell using schedtool and from within a C program using Linux API are practically shown.
Lec22 Design And Code Of UNIX Shell Utility (Arif Butt @ PUCIT),https://youtube.com/watch?v=F7oAWvh5J_o,This session gives an overview of working of UNIX bash shell utility. The features of bash shell are discussed in detail. The famous questions of What the Shell do? and How the shell do it? are addressed. Finally some basic versions of a shell program are designed and developed. Remaining some versions are discussed but writing their code is left as an assignment.
Lec23 Multi Threaded Programming (Arif Butt @ PUCIT),https://youtube.com/watch?v=OgnLaXwLC8Y,"This session gives an overview of concurrent programming using pthread NPTL library. Conventional Concurrent Servers and their Problems are discussed. Available thread implementation models. Linux implementation of POSIX threads (LinuxThreads and NPTL). Thread creation and termination, joining threads, passing implicit data types to thread function, and passing structures to thread function. Returning and receiving data from a thread function. Creating Thread arrays on stack, and creating thread arrays on heap. Thread attributes (detachstate, stackaddr, stacksize, priority, inheritsched). Changing the default attributes of a thread. Threads and signals. Threads and fork(). Thread cancellation"
Lec24 Overview Of UNIX IPC And Signals On The Shell (Arif Butt @ PUCIT),https://youtube.com/watch?v=EX7EWSX8-qM,"This session gives an overview of taxonomy of UNIX Inter Process Communication. Describing briefly the communication, synchronisation and the signals categories and their further subcategories. The persistence of different IPC objects is discussed. Finally there is a quick recap of the concept and use of standard signals on the shell"
Lec25 Design and Code Of Signal Handlers (Arif Butt @ PUCIT),https://youtube.com/watch?v=YBg9sWw4qbU,"This session is a continuation of previous session in which we discussed signals on the shell. This session deals with different system calls to send signals to a process using kill(), raise(), abort(), pause(), alarm(), sleep(), usleep(), nanosleep() functions. Ignoring and handling signals using signal() system call. Avoiding race conditions using signal mask and sigprocmask() system call. Limitations of signal() system call. Ignoring and handling signals using sigaction() system call"
Lec26 Programming UNIX Pipes (Arif Butt @ PUCIT),https://youtube.com/watch?v=VA8FEgahi1Y,This session deals with the concept and use of pipes in a C program using the pipe() system call. How to use a pipe for IPC among related processes for unidirectional communication. The concept of using two pipes for bidirectional communication is also discussed and a proof of concept is given by a sample program. Finally a C program code is discussed that simulate the shell command man ls | grep ls | wc
Lec27 Programming UNIX Named Pipes (Arif Butt @ PUCIT),https://youtube.com/watch?v=jowB4nuf55c,This session deals with the concept and use of named pipes or FIFOs in a C program using the mkfifo() and mknod() system call. How to use a named pipe for IPC among un-related processes for unidirectional communication. The concept of using two named pipes for bidirectional communication is also discussed and a proof of concept is given by a sample program
Lec28 Message Queues (Arif Butt @ PUCIT),https://youtube.com/watch?v=UAbMS3kYV5s,"This session deals with the concept and use of message queues. Both System-V as well as the POSIX message queues are discussed. Data structures used by System-V message queues are described. The implementation of message queues are done using the  System-V API. msgget(), msgsnd(),msgrcv(),msgctl()"
Lec29 Programming With Shared Memory (Arif Butt @ PUCIT),https://youtube.com/watch?v=IzhnAW8u1iQ,"This session deals with the concept and use of shared memory.  The implementation of shared memory is done using the  System-V API: shmget(), shmat(), shmdt(), shmctl(). Use of ipcs, and ipcrm commands are also discussed."
Lec30 Memory Mapped Files (Arif Butt @ PUCIT),https://youtube.com/watch?v=z0I1TlqDi50,"This session deals with the concept and use of memory mapped files.  The location of memory mappings in process address space is discussed. Comparison between private and shared file mapping. Use of mmap(), msync(), and munmap() are discussed. Finally some sample programs are discussed for a proof of concept."
Lec31 Synchronization among Threads (Arif Butt @ PUCIT),https://youtube.com/watch?v=SvFr7rPWI3g,"This session starts with a quick recap of POSIX threads and then gives an overview of synchronization. The concept of race condition and critical section problems are discussed. Then the concept of direct and indirect data sharing among threads, threads safety and reentrant functions are described.  Introduction to mutex, locking, unlocking and destroying a mutex object. Mutex attributes and mutex types. Introduction to condition variable. The concept of thread cancellation is introduced. Finally problems like producer consumer problem and barber shop problem are discussed."
Lec32 Programming with POSIX Semaphores (Arif Butt @ PUCIT),https://youtube.com/watch?v=KupTFYvxRnE,"This session starts with introduction to POSIX semaphores by giving a comparison between mutex, condition variable and semaphore. The implementation of named and unnamed semaphores and their API is discussed. Sample codes are discussed which gives a CSP solution using semaphores among threads and processes. The solution of serialization is also discussed among threads and processes using semaphores. Finally, the use of counting semaphores is also explained"
Lec33 Overview Of TCPIP Architecture and Services (Arif Butt @ PUCIT),https://youtube.com/watch?v=p5SrRob-bWg,"This session starts with introduction to TCP/IP stack and addressing on different layers of TCP/IP stack. Some important NW services (ssh, telnet, echo, chargen, daytime, time, discard) are discussed. The lab environment for future sessions is described comprising of three machines running Kali Linux, Ubuntu Server and Windows 10. Finally, use of different NW configuration tools and the use of different services are shown on Linux terminal."
Lec34 Socket Programming Part-I (Arif Butt @ PUCIT),https://youtube.com/watch?v=tk_RpIVbOMQ,"This session starts with introduction to Client Server paradigm. Then a detailed comparison of TCP and UDP sockets is discussed with examples. Three way connection establishment and four way connection termination is compared and shown practically using Wireshark tool. The system call graph of Internet domain TCP Client and server is described. The related system calls for creating and managing the sockets are discussed. Proof of these concepts is given by example codes of echo and daytime clients and servers. Some important lookup functions like gethostbyname() and getservbyname() are discussed with examples. Finally, the session closes with a description of assignment on writing your own web server."
Lec35 Socket Programming Part-II (Arif Butt @ PUCIT),https://youtube.com/watch?v=yNUFQaSclmM,"This session starts with introduction to Datagram Sockets by giving an overview of how datagram sockets work. The system call graph of Internet domain UDP Client and server is described. The related system calls for creating and managing the sockets are discussed. Proof of these concepts is given by example codes of echo, daytime and time clients and servers."
Lec36 Socket Programming Part-III (Arif Butt @ PUCIT),https://youtube.com/watch?v=TDRIweWXHe4,This session starts with introduction to UNIX domain sockets. A comparison between UNIX domain TCP sockets and UNIX domain UDP sockets is made. Proof of these concepts is given by example codes of UNIX domain TCP echo client server programs as well as UNIX domain UDP sender and receiver programs
Lec37 Socket Programming Part-IV (Arif Butt @ PUCIT),https://youtube.com/watch?v=irRkNrruwxc,"This session starts with a discussion on concurrent servers and their advantages.  What happens when multiple echo client accesses an iterative echo server. A concurrent echo server is designed using three techniques. Using fork(), then using pthread_create() and finally using the famous select() system call. The need of concurrent clients is also discussed in the end."
Lec39 Exploiting Buffer Overflow Vulnerability Part-II (Arif Butt @ PUCIT),https://youtube.com/watch?v=eAzCm0Ncnhg,"This is a continuation of Video Session 38. In this session we will discuss what are shell codes and how these are used. Four different ways of writing/getting shell codes are discussed. First of all how we can write shell codes from scratch using Assembly Language is discussed, and then the same is used in a stand alone C-program. Secondly different Internet archives are explored to get shell codes. Thirdly writing your shell codes using pwn tools, and finally writing your shell codes using msfvenom and using them in stand alone C-program. Proof of all these concepts are shown using hands on a Linux terminal and using ipython
Email: arif@pucit.edu.pk
Example Codes: https://bitbucket.org/arifpucit/spvl-repo/src "
Lec38 Exploiting Buffer Overflow Vulnerability Part-I (Arif Butt @ PUCIT),https://youtube.com/watch?v=3hDNvlIZFQ8,"This is a series of three videos, which gives a quick start up on different exploitation and mitigation techniques for the buffer overflow vulnerability. The session start with an overview of a classic stack based buffer overflow. How a stack based buffer overflow can be exploited? Exploit mitigation techniques. The architecture of x86_64, its assembly and function calling convention. Installing and using PEDA. Finally a practical sample program is shown as to how to change the control of flow of execution of a program using PEDA."
Lec40 Exploiting Buffer Overflow Vulnerability Part-III (Arif Butt @ PUCIT),https://youtube.com/watch?v=DayRrBYZRRk,This is a continuation of Video Session 39. In this session we will see ways of finding vulnerabilities in executables. Crafting an input string to vulnerable programs to shift the control of flow of execution to some other part in the code section. Injecting shell code via input string and transferring control of flow to it. We will learn how to inject shell code via environment variables and transferring control of flow to it. Addressing problems that most of the students face when exploiting vulnerable programs outside gdb. Exploiting a vulnerable echo server executing on a remote machine and creating a tcp bind shell and a reverse tcp shell. A discussion on bypassing exploit mitigation techniques used by most modern operating systems and compilers.
